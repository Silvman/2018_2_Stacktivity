WebSocket protocol by Stacktivity.

В процессе игры (включая её завершение и создание) бек и фронт обмениваются
сообщениями в JSON формате.
У каждого сообщения есть обязательное поле event, в зависимости от которого 
могут присутствовать дополнительные поля.

Список event'ов:

1. Создание соединения:

f->b: запрос на создание ws канала
b->f: 
{
	event: 1, //"success"		
}


2. Вход в игру и начало, также при смене уровня:

b->f:
{
	event: 2, //"level"
	level: {
		levelNumber: num, //номер уровня
		balls: [], //список шаров на уровне, внутри объекты типа ball
	}
	players: [str] // список nickname'ов пользователей в игре [0] - игрок на данном компе, [1] - противник (если мультиплеер) 
}

			ball:
			{
				number: num, //уникальный номаер шара на карте
				x: num,
				y: num,
				r: num,
				type: str, // может быть "wall" и "goal"
				color: str // цвет шара
			}


3. Обновление положения кривой:

f->b: при рисовании
b->f: передает положение кривой от enemy

{
	event: 3 //"updateCurve"
	curve: [
		{
			x: num,
			y: num
		},
	]
}


4. Конец ввода - начало движения линии:

f->b: при завершении ввода
b->f: при некорректно введенной точке (после это линия начинает движение с корректными)

{
	event: 4, //"start"
	curve: [
		{
			x: num,
			y: num
		},
	]
}


5. Сброс линии при пересечении стены, либо выхода из поля:

b->f: при коллизии со стеной или полем

{
	event: 5 //"collisionDrop"
}


6. Сброс линии при невалидной ситуации:

b->f: при невалидной ситуации

{
	event: 6 //"invalidDrop"
}


7. Удаление шара, при сбитии его линией:

b->f: "goal" шар сбит линией

{
	event: 7, //"dropBall",
	ball: num // номер шара для удаления
}


8. Завершение уровня

b->f: при завершении уровня

{
	event: 8, //"LevelComplete"
	status: str // "success", "failure"  
}
